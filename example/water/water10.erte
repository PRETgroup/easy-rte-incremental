function water10;
interface of water10 {
    //in here means that they're going from PLANT to CONTROLLER
	in bool ID1;  // Sensor identification passed
	in bool OK1;  // Sensor reporting okay status
    //out here means that they're going from CONTROLLER to PLANT
	out bool PUMP1; // Controller actuating pump

	in bool ID2;  // Sensor identification passed
	in bool OK2;  // Sensor reporting okay status
    //out here means that they're going from CONTROLLER to PLANT
	out bool PUMP2; // Controller actuating pump

	in bool ID3;  // Sensor identification passed
	in bool OK3;  // Sensor reporting okay status
    //out here means that they're going from CONTROLLER to PLANT
	out bool PUMP3; // Controller actuating pump

	in bool ID4;  // Sensor identification passed
	in bool OK4;  // Sensor reporting okay status
    //out here means that they're going from CONTROLLER to PLANT
	out bool PUMP4; // Controller actuating pump

	in bool ID5;  // Sensor identification passed
	in bool OK5;  // Sensor reporting okay status
    //out here means that they're going from CONTROLLER to PLANT
	out bool PUMP5; // Controller actuating pump

	in bool ID6;  // Sensor identification passed
	in bool OK6;  // Sensor reporting okay status
    //out here means that they're going from CONTROLLER to PLANT
	out bool PUMP6; // Controller actuating pump
	
	in bool ID7;  // Sensor identification passed
	in bool OK7;  // Sensor reporting okay status
    //out here means that they're going from CONTROLLER to PLANT
	out bool PUMP7; // Controller actuating pump

	in bool ID8;  // Sensor identification passed
	in bool OK8;  // Sensor reporting okay status
    //out here means that they're going from CONTROLLER to PLANT
	out bool PUMP8; // Controller actuating pump

	in bool ID9;  // Sensor identification passed
	in bool OK9;  // Sensor reporting okay status
    //out here means that they're going from CONTROLLER to PLANT
	out bool PUMP9; // Controller actuating pump

	in bool ID10;  // Sensor identification passed
	in bool OK10;  // Sensor reporting okay status
    //out here means that they're going from CONTROLLER to PLANT
	out bool PUMP10; // Controller actuating pump

}


policy s1 of water10 {
	states {

		//first state is initial, and represents "We're waiting for an ID1 event from the sensor"
		l0 {
			enforce OK1 := 0, ID1 := 0 if (OK1 and ID1); // this needs to go first for priority
			enforce OK1 := 0 if OK1;
			enforce PUMP1 := 0 if PUMP1;

			-> l0 on (!ID1 and !OK1 and !PUMP1);

			-> l1 on (ID1 and !OK1 and !PUMP1);
			
			//-> violation on (PUMP1) recover PUMP1 := 0;	
			//-> violation on (ID1 and OK1) recover ID1 := 0, OK1:= 0;	
		}

		//l1 is "we are waiting for a sensor update to determine if we could pump or not"
		l1 {
			enforce ID1 := 0, OK1 := 0 if ID1; // If the sensor IDs again it is considered malicious  
            enforce PUMP1 := 0 if !OK1; // Don't pump if the sensor says dont!
			//enforce PUMP1 := 1 if OK1; // Must pump if sensor says ok - REMOVED As controller using "sensor fusion" and redundancy in sensors

			-> l0 on ((!ID1 and OK1 and PUMP1) or (!ID1 and !OK1 and !PUMP1) or (!ID1 and OK1 and !PUMP1)); // straight back to 10
		}
	}
}

policy s2 of water10 {
	states {

		//first state is initial, and represents "We're waiting for an ID2 event from the sensor"
		l0 {
			enforce OK2 := 0, ID2 := 0 if (OK2 and ID2); // this needs to go first for priority
			enforce OK2 := 0 if OK2;
			enforce PUMP2 := 0 if PUMP2;

			-> l0 on (!ID2 and !OK2 and !PUMP2);

			-> l1 on (ID2 and !OK2 and !PUMP2);
			
			//-> violation on (PUMP2) recover PUMP2 := 0;	
			//-> violation on (ID2 and OK2) recover ID2 := 0, OK2:= 0;	
		}

		//l1 is "we are waiting for a sensor update to determine if we could pump or not"
		l1 {
			enforce ID2 := 0, OK2 := 0 if ID2; // If the sensor ID2s again it is considered malicious  
            enforce PUMP2 := 0 if !OK2; // Don't pump if the sensor says dont!
			//enforce PUMP2 := 1 if OK2; // Must pump if sensor says ok - REMOVED As controller using "sensor fusion" and redundancy in sensors

			-> l0 on ((!ID2 and OK2 and PUMP2) or (!ID2 and !OK2 and !PUMP2) or (!ID2 and OK2 and !PUMP2)); // straight back to 10
		}
	}
}
policy s3 of water10 {
	states {

		//first state is initial, and represents "We're waiting for an ID3 event from the sensor"
		l0 {
			enforce OK3 := 0, ID3 := 0 if (OK3 and ID3); // this needs to go first for priority
			enforce OK3 := 0 if OK3;
			enforce PUMP3 := 0 if PUMP3;

			-> l0 on (!ID3 and !OK3 and !PUMP3);

			-> l1 on (ID3 and !OK3 and !PUMP3);
			
			//-> violation on (PUMP3) recover PUMP3 := 0;	
			//-> violation on (ID3 and OK3) recover ID3 := 0, OK3:= 0;	
		}

		//l1 is "we are waiting for a sensor update to determine if we could pump or not"
		l1 {
			enforce ID3 := 0, OK3 := 0 if ID3; // If the sensor ID3s again it is considered malicious  
            enforce PUMP3 := 0 if !OK3; // Don't pump if the sensor says dont!
			//enforce PUMP3 := 1 if OK3; // Must pump if sensor says ok - REMOVED As controller using "sensor fusion" and redundancy in sensors

			-> l0 on ((!ID3 and OK3 and PUMP3) or (!ID3 and !OK3 and !PUMP3) or (!ID3 and OK3 and !PUMP3)); // straight back to 10
		}
	}
}

policy s4 of water10 {
	states {

		//first state is initial, and represents "We're waiting for an ID4 event from the sensor"
		l0 {
			enforce OK4 := 0, ID4 := 0 if (OK4 and ID4); // this needs to go first for priority
			enforce OK4 := 0 if OK4;
			enforce PUMP4 := 0 if PUMP4;

			-> l0 on (!ID4 and !OK4 and !PUMP4);

			-> l1 on (ID4 and !OK4 and !PUMP4);
			
			//-> violation on (PUMP4) recover PUMP4 := 0;	
			//-> violation on (ID4 and OK4) recover ID4 := 0, OK4:= 0;	
		}

		//l1 is "we are waiting for a sensor update to determine if we could pump or not"
		l1 {
			enforce ID4 := 0, OK4 := 0 if ID4; // If the sensor ID4s again it is considered malicious  
            enforce PUMP4 := 0 if !OK4; // Don't pump if the sensor says dont!
			//enforce PUMP4 := 1 if OK4; // Must pump if sensor says ok - REMOVED As controller using "sensor fusion" and redundancy in sensors

			-> l0 on ((!ID4 and OK4 and PUMP4) or (!ID4 and !OK4 and !PUMP4) or (!ID4 and OK4 and !PUMP4)); // straight back to 10
		}
	}
}

policy s5 of water10 {
	states {

		//first state is initial, and represents "We're waiting for an ID5 event from the sensor"
		l0 {
			enforce OK5 := 0, ID5 := 0 if (OK5 and ID5); // this needs to go first for priority
			enforce OK5 := 0 if OK5;
			enforce PUMP5 := 0 if PUMP5;

			-> l0 on (!ID5 and !OK5 and !PUMP5);

			-> l1 on (ID5 and !OK5 and !PUMP5);
			
			//-> violation on (PUMP5) recover PUMP5 := 0;	
			//-> violation on (ID5 and OK5) recover ID5 := 0, OK5:= 0;	
		}

		//l1 is "we are waiting for a sensor update to determine if we could pump or not"
		l1 {
			enforce ID5 := 0, OK5 := 0 if ID5; // If the sensor ID5s again it is considered malicious  
            enforce PUMP5 := 0 if !OK5; // Don't pump if the sensor says dont!
			//enforce PUMP5 := 1 if OK5; // Must pump if sensor says ok - REMOVED As controller using "sensor fusion" and redundancy in sensors

			-> l0 on ((!ID5 and OK5 and PUMP5) or (!ID5 and !OK5 and !PUMP5) or (!ID5 and OK5 and !PUMP5)); // straight back to 10
		}
	}
}
policy s6 of water10 {
	states {

		//first state is initial, and represents "We're waiting for an ID6 event from the sensor"
		l0 {
			enforce OK6 := 0, ID6 := 0 if (OK6 and ID6); // this needs to go first for priority
			enforce OK6 := 0 if OK6;
			enforce PUMP6 := 0 if PUMP6;

			-> l0 on (!ID6 and !OK6 and !PUMP6);

			-> l1 on (ID6 and !OK6 and !PUMP6);
			
			//-> violation on (PUMP6) recover PUMP6 := 0;	
			//-> violation on (ID6 and OK6) recover ID6 := 0, OK6:= 0;	
		}

		//l1 is "we are waiting for a sensor update to determine if we could pump or not"
		l1 {
			enforce ID6 := 0, OK6 := 0 if ID6; // If the sensor ID6s again it is considered malicious  
            enforce PUMP6 := 0 if !OK6; // Don't pump if the sensor says dont!
			//enforce PUMP6 := 1 if OK6; // Must pump if sensor says ok - REMOVED As controller using "sensor fusion" and redundancy in sensors

			-> l0 on ((!ID6 and OK6 and PUMP6) or (!ID6 and !OK6 and !PUMP6) or (!ID6 and OK6 and !PUMP6)); // straight back to 10
		}
	}
}
policy s7 of water10 {
	states {

		//first state is initial, and represents "We're waiting for an ID7 event from the sensor"
		l0 {
			enforce OK7 := 0, ID7 := 0 if (OK7 and ID7); // this needs to go first for priority
			enforce OK7 := 0 if OK7;
			enforce PUMP7 := 0 if PUMP7;

			-> l0 on (!ID7 and !OK7 and !PUMP7);

			-> l1 on (ID7 and !OK7 and !PUMP7);
			
			//-> violation on (PUMP7) recover PUMP7 := 0;	
			//-> violation on (ID7 and OK7) recover ID7 := 0, OK7:= 0;	
		}

		//l1 is "we are waiting for a sensor update to determine if we could pump or not"
		l1 {
			enforce ID7 := 0, OK7 := 0 if ID7; // If the sensor ID7s again it is considered malicious  
            enforce PUMP7 := 0 if !OK7; // Don't pump if the sensor says dont!
			//enforce PUMP7 := 1 if OK7; // Must pump if sensor says ok - REMOVED As controller using "sensor fusion" and redundancy in sensors

			-> l0 on ((!ID7 and OK7 and PUMP7) or (!ID7 and !OK7 and !PUMP7) or (!ID7 and OK7 and !PUMP7)); // straight back to 10
		}
	}
}
policy s8 of water10 {
	states {

		//first state is initial, and represents "We're waiting for an ID8 event from the sensor"
		l0 {
			enforce OK8 := 0, ID8 := 0 if (OK8 and ID8); // this needs to go first for priority
			enforce OK8 := 0 if OK8;
			enforce PUMP8 := 0 if PUMP8;

			-> l0 on (!ID8 and !OK8 and !PUMP8);

			-> l1 on (ID8 and !OK8 and !PUMP8);
			
			//-> violation on (PUMP8) recover PUMP8 := 0;	
			//-> violation on (ID8 and OK8) recover ID8 := 0, OK8:= 0;	
		}

		//l1 is "we are waiting for a sensor update to determine if we could pump or not"
		l1 {
			enforce ID8 := 0, OK8 := 0 if ID8; // If the sensor ID8s again it is considered malicious  
            enforce PUMP8 := 0 if !OK8; // Don't pump if the sensor says dont!
			//enforce PUMP8 := 1 if OK8; // Must pump if sensor says ok - REMOVED As controller using "sensor fusion" and redundancy in sensors

			-> l0 on ((!ID8 and OK8 and PUMP8) or (!ID8 and !OK8 and !PUMP8) or (!ID8 and OK8 and !PUMP8)); // straight back to 10
		}
	}
}
policy s9 of water10 {
	states {

		//first state is initial, and represents "We're waiting for an ID9 event from the sensor"
		l0 {
			enforce OK9 := 0, ID9 := 0 if (OK9 and ID9); // this needs to go first for priority
			enforce OK9 := 0 if OK9;
			enforce PUMP9 := 0 if PUMP9;

			-> l0 on (!ID9 and !OK9 and !PUMP9);

			-> l1 on (ID9 and !OK9 and !PUMP9);
			
			//-> violation on (PUMP9) recover PUMP9 := 0;	
			//-> violation on (ID9 and OK9) recover ID9 := 0, OK9:= 0;	
		}

		//l1 is "we are waiting for a sensor update to determine if we could pump or not"
		l1 {
			enforce ID9 := 0, OK9 := 0 if ID9; // If the sensor ID9s again it is considered malicious  
            enforce PUMP9 := 0 if !OK9; // Don't pump if the sensor says dont!
			//enforce PUMP9 := 1 if OK9; // Must pump if sensor says ok - REMOVED As controller using "sensor fusion" and redundancy in sensors

			-> l0 on ((!ID9 and OK9 and PUMP9) or (!ID9 and !OK9 and !PUMP9) or (!ID9 and OK9 and !PUMP9)); // straight back to 10
		}
	}
}
policy s10 of water10 {
	states {

		//first state is initial, and represents "We're waiting for an ID10 event from the sensor"
		l0 {
			enforce OK10 := 0, ID10 := 0 if (OK10 and ID10); // this needs to go first for priority
			enforce OK10 := 0 if OK10;
			enforce PUMP10 := 0 if PUMP10;

			-> l0 on (!ID10 and !OK10 and !PUMP10);

			-> l1 on (ID10 and !OK10 and !PUMP10);
			
			//-> violation on (PUMP10) recover PUMP10 := 0;	
			//-> violation on (ID10 and OK10) recover ID10 := 0, OK10:= 0;	
		}

		//l1 is "we are waiting for a sensor update to determine if we could pump or not"
		l1 {
			enforce ID10 := 0, OK10 := 0 if ID10; // If the sensor ID10s again it is considered malicious  
            enforce PUMP10 := 0 if !OK10; // Don't pump if the sensor says dont!
			//enforce PUMP10 := 1 if OK10; // Must pump if sensor says ok - REMOVED As controller using "sensor fusion" and redundancy in sensors

			-> l0 on ((!ID10 and OK10 and PUMP10) or (!ID10 and !OK10 and !PUMP10) or (!ID10 and OK10 and !PUMP10)); // straight back to 10
		}
	}
}
