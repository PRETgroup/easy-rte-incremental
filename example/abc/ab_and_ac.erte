function ab_and_ac;
interface of ab_and_ac {
	in uint8_t A;  //in here means that they're going from PLANT to CONTROLLER
	out uint8_t B; //out here means that they're going from CONTROLLER to PLANT
	out uint8_t C; //out here means that they're going from CONTROLLER to PLANT
}

policy ab of ab_and_ac {
	states {

		b0 {
			-> b0 on (!A and !B);

			-> b1 on (A and !B);
			
			-> violation on ((!A and B) or (A and B)) recover B := 0;	
		}

		b1 {
			//enforce B := 1;
			//enforce A := 0 if A;
			
			-> violation on ((!A and !B) or (A)) recover A := 0;	
			-> violation on (!B) recover B := 1;	

			//if we receive a B only, head to state s0					
			-> b0 on (!A and B);

		}
	}
}

policy ac of ab_and_ac {
	states {

		c0 {
			-> c0 on (!A and !C);

			-> c1 on (A and !C);
			
			-> violation on ((!A and C) or (A and C)) recover C := 0;	
		}

		c1 {
			// dont use enforce signals when composing monolithically 
			// (adds some form of priority which causes incorrect composition)
			//enforce C := 1;
			//enforce A := 0 if A;
			
			-> violation on ((!A and !C) or (A)) recover A := 0;	
			-> violation on (!C) recover C := 1;	

			-> c0 on (!A and C);

		}
	}
}