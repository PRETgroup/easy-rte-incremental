function px_py_pz;
interface of px_py_pz {
	in uint8_t x, y, z;
	out bool x_accel, x_hold, y_accel, y_hold, z_accel, z_hold; //out here means that they're going from CONTROLLER to PLANT
}

policy px_py_pz of px_py_pz {
	internals {
		constant uint8_t max_x := 10; 
		constant uint8_t max_y := 10; 
		constant uint8_t max_z := 10; 
	}

	states {
        
		l0l2l4 {												
			-> l0l2l4 on (x < max_x || (!x_accel && x >= max_x));
			-> l0l2l4 on (y < max_y || (!y_accel && x >= max_y));
			-> l0l2l4 on (z < max_z || (!z_accel && x >= max_z));
			-> l1l2l4 on (!x_accel && x_hold && x <= max_x);
			-> l0l3l4 on (!y_accel && y_hold && y <= max_y);
			-> l0l2l5 on (!z_accel && z_hold && z <= max_z);
			-> l1l2l5 on (!x_accel && x_hold && x <= max_x && !z_accel && z_hold && z <= max_z);
			-> l0l3l5 on (!y_accel && y_hold && y <= max_y && !z_accel && z_hold && z <= max_z);
			-> l1l3l4 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
			-> violation on (z_accel && z >= max_z) recover z_accel:= 0;
		}

		l1l2l4 {		// hold x										
			-> l1l2l4 on (!x_accel && x_hold && x <= max_x);
			-> l0l3l4 on (!y_accel && y_hold && y <= max_y);
			-> l0l2l5 on (!z_accel && z_hold && z <= max_z);
			-> l1l2l5 on (!x_accel && x_hold && x <= max_x && !z_accel && z_hold && z <= max_z);
			-> l0l3l5 on (!y_accel && y_hold && y <= max_y && !z_accel && z_hold && z <= max_z);
			-> l1l3l4 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
			-> violation on (z_accel && z >= max_z) recover z_accel:= 0;
		}

		l0l3l4 {		// hold y									
			-> l1l2l4 on (!x_accel && x_hold && x <= max_x);
			-> l0l3l4 on (!y_accel && y_hold && y <= max_y);
			-> l0l2l5 on (!z_accel && z_hold && z <= max_z);
			-> l1l2l5 on (!x_accel && x_hold && x <= max_x && !z_accel && z_hold && z <= max_z);
			-> l0l3l5 on (!y_accel && y_hold && y <= max_y && !z_accel && z_hold && z <= max_z);
			-> l1l3l4 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
			-> violation on (z_accel && z >= max_z) recover z_accel:= 0;
		}

		l0l2l5 {		// hold z									
			-> l1l2l4 on (!x_accel && x_hold && x <= max_x);
			-> l0l3l4 on (!y_accel && y_hold && y <= max_y);
			-> l0l2l5 on (!z_accel && z_hold && z <= max_z);
			-> l1l2l5 on (!x_accel && x_hold && x <= max_x && !z_accel && z_hold && z <= max_z);
			-> l0l3l5 on (!y_accel && y_hold && y <= max_y && !z_accel && z_hold && z <= max_z);
			-> l1l3l4 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
			-> violation on (z_accel && z >= max_z) recover z_accel:= 0;
		}

		l1l3l4 {		// hold x & y	
			-> l1l2l4 on (!x_accel && x_hold && x <= max_x);
			-> l0l3l4 on (!y_accel && y_hold && y <= max_y);
			-> l0l2l5 on (!z_accel && z_hold && z <= max_z);
			-> l1l2l5 on (!x_accel && x_hold && x <= max_x && !z_accel && z_hold && z <= max_z);
			-> l0l3l5 on (!y_accel && y_hold && y <= max_y && !z_accel && z_hold && z <= max_z);
			-> l1l3l4 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
			-> violation on (z_accel && z >= max_z) recover z_accel:= 0;
		}

		l1l2l5 {		// hold x & z									
			-> l1l2l4 on (!x_accel && x_hold && x <= max_x);
			-> l0l3l4 on (!y_accel && y_hold && y <= max_y);
			-> l0l2l5 on (!z_accel && z_hold && z <= max_z);
			-> l1l2l5 on (!x_accel && x_hold && x <= max_x && !z_accel && z_hold && z <= max_z);
			-> l0l3l5 on (!y_accel && y_hold && y <= max_y && !z_accel && z_hold && z <= max_z);
			-> l1l3l4 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
			-> violation on (z_accel && z >= max_z) recover z_accel:= 0;
		}

		l0l3l5 {		// hold y & z									
			-> l1l2l4 on (!x_accel && x_hold && x <= max_x);
			-> l0l3l4 on (!y_accel && y_hold && y <= max_y);
			-> l0l2l5 on (!z_accel && z_hold && z <= max_z);
			-> l0l3l5 on (!y_accel && y_hold && y <= max_y && !z_accel && z_hold && z <= max_z);
			-> l1l2l5 on (!x_accel && x_hold && x <= max_x && !z_accel && z_hold && z <= max_z);
			-> l1l3l4 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
			-> violation on (z_accel && z >= max_z) recover z_accel:= 0;
		}

		l1l3l5 {		// hold x & y & z								
			-> l1l2l4 on (!x_accel && x_hold && x <= max_x);
			-> l0l3l4 on (!y_accel && y_hold && y <= max_y);
			-> l0l2l5 on (!z_accel && z_hold && z <= max_z);
			-> l0l3l5 on (!y_accel && y_hold && y <= max_y && !z_accel && z_hold && z <= max_z);
			-> l1l2l5 on (!x_accel && x_hold && x <= max_x && !z_accel && z_hold && z <= max_z);
			-> l1l3l4 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> l1l3l5 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y && !z_accel && z_hold && z <= max_z);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
			-> violation on (z_accel && z >= max_z) recover z_accel:= 0;
		}

	}
}