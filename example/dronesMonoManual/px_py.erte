function px_py;
interface of px_py {
	in uint8_t x, y;
	out bool x_accel, x_hold, y_accel, y_hold; //out here means that they're going from CONTROLLER to PLANT
}

policy px_py of px_py {
	internals {
		constant uint8_t max_x := 10; 
		constant uint8_t max_y := 10; 
	}

	states {
        
		l0l2 {												
			-> l0l2 on (x < max_x || (!x_accel && x >= max_x));
			-> l0l2 on (y < max_y || (!y_accel && x >= max_y));
			-> l1l2 on (!x_accel && x_hold && x <= max_x);
			-> l0l3 on (!y_accel && y_hold && y <= max_y);
			-> l1l3 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
		}

		l1l2 {		// hold x										
			-> l1l2 on (!x_accel && x_hold && x <= max_x);
			-> l0l3 on (!y_accel && y_hold && y <= max_y);
			-> l1l3 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
		}

		l0l3 {		// hold y									
			-> l0l3 on (!y_accel && y_hold && y <= max_y);
			-> l1l2 on (!x_accel && x_hold && x <= max_x);
			-> l1l3 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
		}

		l1l3 {		// hold x & y									
			-> l1l3 on (!x_accel && x_hold && x <= max_x && !y_accel && y_hold && y <= max_y);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (y_accel && y >= max_x) recover y_accel:= 0;
		}

	}
}