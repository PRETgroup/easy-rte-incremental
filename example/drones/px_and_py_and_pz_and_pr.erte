function px_and_py_and_pz_and_pr;
interface of px_and_py_and_pz_and_pr {
	in uint8_t x, y, z, x2;
	in uint16_t rpm;
	out uint8_t x_accel, x_hold, y_accel, y_hold, z_accel, z_hold, rpm_up, rpm_hold, x2_accel, x2_hold; //out here means that they're going from CONTROLLER to PLANT
}

policy px of px_and_py_and_pz_and_pr {
	internals {
		constant uint8_t max_x := 10; 
	}

	states {
        
		l0 {												
			-> l0 on ((!x_accel && !x_hold) || (x_accel && !x_hold && x < max_x));
			-> l1 on (!x_accel && x_hold && x <= max_x);
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (x_accel && x_hold) recover x_accel:= 0;
		}

		l1 {												
			-> l1 on (x_hold && x <= 10);
			//-> l0 on (x < max_x || (!x_accel && x >= max_x));
			-> violation on (x_accel && x >= max_x) recover x_accel:= 0;
			-> violation on (x_accel && x_hold) recover x_accel:= 0;
		}

	}
}

policy py of px_and_py_and_pz_and_pr {
	internals {
		constant uint8_t max_y := 10; 
	}

	states {
        
		l0 {												
			-> l0 on ((!y_accel && !y_hold) || (y_accel && !y_hold && y < max_y));
			-> l1 on (!y_accel && y_hold && y <= max_y);
			-> violation on (y_accel && y >= max_y) recover y_accel:= 0;
			-> violation on (y_accel && y_hold) recover y_accel:= 0;
		}

		l1 {												
			-> l1 on (y_hold && y <= 10);
			//-> l0 on (y < max_y || (!y_accel && y >= max_y));
			-> violation on (y_accel && y >= max_y) recover y_accel:= 0;
			-> violation on (y_accel && y_hold) recover y_accel:= 0;
		}

	}
}

policy pz of px_and_py_and_pz_and_pr {
	internals {
		constant uint8_t max_z := 10; 
	}

	states {
        
		l0 {												
			-> l0 on ((!z_accel && !z_hold) || (z_accel && !z_hold && z < max_z));
			-> l1 on (!z_accel && x_hold && z <= max_z);
			-> violation on (z_accel && z >= max_z) recover z_accel:= 0;
			-> violation on (z_accel && z_hold) recover z_accel:= 0;
		}

		l1 {												
			-> l1 on (z_hold && z <= 10);
			//-> l0 on (z < max_z || (!z_accel && z >= max_z));
			-> violation on (z_accel && z >= max_z) recover z_accel:= 0;
			-> violation on (z_accel && z_hold) recover z_accel:= 0;
		}

	}
}

policy pr of px_and_py_and_pz_and_pr {
internals {
		constant uint8_t max_rpm := 1250; 
	}

	states {
        
		l0 {												
			-> l0 on ((!rpm_up && !rpm_hold) || (rpm_up && !rpm_hold && rpm < max_rpm));
			-> l1 on (!rpm_up && x_hold && rpm <= max_rpm);
			-> violation on (rpm_up && rpm >= max_rpm) recover rpm_up:= 0;
			-> violation on (rpm_up && rpm_hold) recover rpm_up:= 0;
		}

		l1 {												
			-> l1 on (rpm_hold && rpm <= 1250);
			//-> l0 on (rpm < max_rpm || (!rpm_up && rpm >= max_rpm));
			-> violation on (rpm_up && rpm >= max_rpm) recover rpm_up:= 0;
			-> violation on (rpm_up && rpm_hold) recover rpm_up:= 0;
		}

	}
}